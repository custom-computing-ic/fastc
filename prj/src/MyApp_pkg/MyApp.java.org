
package MyApp_pkg;

import com.maxeler.maxcompiler.v1.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v1.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v1.kernelcompiler.stdlib.DRAMCommandStream;
import com.maxeler.maxcompiler.v1.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v1.kernelcompiler.types.base.HWVar;
import com.maxeler.maxcompiler.v1.kernelcompiler.types.composite.KArray;
import com.maxeler.maxcompiler.v1.kernelcompiler.types.composite.KArrayType;
import com.maxeler.maxcompiler.v1.kernelcompiler.stdlib.core.Stream.OffsetExpr;


public class MyApp extends Kernel {
  public KArrayType<HWVar> comb =
    new KArrayType<HWVar>(hwFloat(8,24),4);
  
  public MyApp (KernelParameters parameters) {
    super(parameters);
 
//------------------------------The parameter configuration part--------------------------------
    //This part is common for all data-paths
    int Par=4;
    OffsetExpr nx = stream.makeOffsetParam("nx", 11, 40);
    OffsetExpr nxy= stream.makeOffsetParam("nxy",11*nx, 40 * nx);

    //constant
    HWVar c_0   = io.scalarInput("c_0",   hwFloat(8, 24));
    HWVar c_1_0 = io.scalarInput("c_1_0", hwFloat(8, 24));
    HWVar c_1_1 = io.scalarInput("c_1_1", hwFloat(8, 24));
    HWVar c_1_2 = io.scalarInput("c_1_2", hwFloat(8, 24));
    HWVar c_1_3 = io.scalarInput("c_1_3", hwFloat(8, 24));
    HWVar c_1_4 = io.scalarInput("c_1_4", hwFloat(8, 24));
    HWVar c_2_0 = io.scalarInput("c_2_0", hwFloat(8, 24));
    HWVar c_2_1 = io.scalarInput("c_2_1", hwFloat(8, 24));
    HWVar c_2_2 = io.scalarInput("c_2_2", hwFloat(8, 24));
    HWVar c_2_3 = io.scalarInput("c_2_3", hwFloat(8, 24));
    HWVar c_2_4 = io.scalarInput("c_2_4", hwFloat(8, 24));
    HWVar c_3_0 = io.scalarInput("c_3_0", hwFloat(8, 24));
    HWVar c_3_1 = io.scalarInput("c_3_1", hwFloat(8, 24));
    HWVar c_3_2 = io.scalarInput("c_3_2", hwFloat(8, 24));
    HWVar c_3_3 = io.scalarInput("c_3_3", hwFloat(8, 24));
    HWVar c_3_4 = io.scalarInput("c_3_4", hwFloat(8, 24));

    HWVar n1    = io.scalarInput("n1",   hwUInt(32));
    HWVar n2    = io.scalarInput("n2",   hwUInt(32));
    HWVar n3    = io.scalarInput("n3",   hwUInt(32));
    HWVar ORDER = io.scalarInput("ORDER",hwUInt(32));

//------------------------------Input part--------------------------------
    //The input stream
    KArray<HWVar> comb_input0 =io.input("comb_input0", comb);
    KArray<HWVar> comb_input1 =io.input("comb_input1", comb);
    KArray<HWVar> comb_input2 =io.input("comb_input2", comb);
    KArray<HWVar> comb_input3 =io.input("comb_input3", comb);

    //KArray split
    HWVar p[]     = new HWVar[Par];
    HWVar pp_i[]  = new HWVar[Par];
    HWVar dvv[]   = new HWVar[Par];
    HWVar source[]= new HWVar[Par];
   
    p[0]     = comb_input0[0];
    pp_i[0]  = comb_input0[1];
    dvv[0]   = comb_input0[2];
    source[0]= comb_input0[3];
   
    p[1]     = comb_input1[0];
    pp_i[1]  = comb_input1[1];
    dvv[1]   = comb_input1[2];
    source[1]= comb_input1[3];
   
    p[2]     = comb_input2[0];
    pp_i[2]  = comb_input2[1];
    dvv[2]   = comb_input2[2];
    source[2]= comb_input2[3];
   
    p[3]     = comb_input3[0];
    pp_i[3]  = comb_input3[1];
    dvv[3]   = comb_input3[2];
    source[3]= comb_input3[3];

//------------------------------Data path--------------------------------
    Datapath kernel0 = new Datapath(this, 
                                   nx, nxy, c_0, c_1_0, c_1_1, c_1_2, c_1_3, c_1_4, c_2_0, c_2_1, c_2_2, c_2_3, c_2_4, c_3_0, c_3_1, c_3_2, c_3_3, c_3_4, n1, n2, n3, ORDER, //parameters input              
                                   p[0],  pp_i[0],dvv[0], source[0]);//stream input
    Datapath kernel1 = new Datapath(this, 
                                   nx, nxy, c_0, c_1_0, c_1_1, c_1_2, c_1_3, c_1_4, c_2_0, c_2_1, c_2_2, c_2_3, c_2_4, c_3_0, c_3_1, c_3_2, c_3_3, c_3_4, n1, n2, n3, ORDER, //parameters input              
                                   p[1],  pp_i[1],dvv[1], source[1]);//stream input
    Datapath kernel2 = new Datapath(this, 
                                   nx, nxy, c_0, c_1_0, c_1_1, c_1_2, c_1_3, c_1_4, c_2_0, c_2_1, c_2_2, c_2_3, c_2_4, c_3_0, c_3_1, c_3_2, c_3_3, c_3_4, n1, n2, n3, ORDER, //parameters input              
                                   p[2],  pp_i[2],dvv[2], source[2]);//stream input
    Datapath kernel3 = new Datapath(this, 
                                   nx, nxy, c_0, c_1_0, c_1_1, c_1_2, c_1_3, c_1_4, c_2_0, c_2_1, c_2_2, c_2_3, c_2_4, c_3_0, c_3_1, c_3_2, c_3_3, c_3_4, n1, n2, n3, ORDER, //parameters input              
                                   p[3],  pp_i[3],dvv[3], source[3]);//stream input

//------------------------------Output part--------------------------------
    KArray<HWVar> comb_output =comb.newInstance(this);
    comb_output[0] <== kernel0.p_res;
    comb_output[1] <== kernel1.p_res;
    comb_output[2] <== kernel2.p_res;
    comb_output[3] <== kernel3.p_res;
//  comb_output[1] <== kernel0.pp_res;
//  comb_output[2] <== dvv[0];
//  comb_output[3] <== source[0];
    io.output("comb_output", comb_output, comb);
    
//------------------------------The debug part--------------------------------
//  debug.printf("cycle:%d-%d-%d\n",i3,i2,i1);
//  debug.printf("up:%d\n",up[0]);
//  debug.printf("p:%.22f\n",cur[Mul-1][5][5][5]);
//  debug.printf("pp:%.22f\n",inter[Mul-1]);
//  debug.printf("dvv:%.22f\n",dvv);
//  debug.printf("source:%.22f\n",source);

  }
}
